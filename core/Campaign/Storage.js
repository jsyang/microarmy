
define(['core/util/$'], function($) {
  var CampaignStorage;
  return CampaignStorage = (function() {

    function CampaignStorage(_) {
      this._ = $.extend({
        lastPoll: 0,
        decayRate: 10,
        contents: {}
      }, _);
    }

    CampaignStorage.prototype.add = function(stuff) {
      var k, v;
      for (k in stuff) {
        v = stuff[k];
        if ((this._.contents[k] != null) && v > 0) {
          this._.contents[k] += v;
        } else {
          this._.contents[k] = v;
        }
      }
    };

    CampaignStorage.prototype.remove = function(stuff) {
      var k, v;
      for (k in stuff) {
        v = stuff[k];
        if (this._.contents[k] && v > 0) {
          this._.contents[k] -= v;
          if (this._.contents[k] <= 0) {
            delete this._.contents[k];
          }
        }
      }
    };

    CampaignStorage.prototype.has = function(stuff) {
      var k, v;
      if (typeof stuff === 'string') {
        return stuff in this._.contents;
      } else {
        for (k in stuff) {
          v = stuff[k];
          if (this._.contents[k] < v) {
            return false;
          }
        }
        return true;
      }
    };

    CampaignStorage.prototype.getContents = function() {
      return $.extend({}, this._.contents);
    };

    CampaignStorage.prototype.printContents = function() {
      var k, stuff, text, v;
      stuff = this._.contents;
      text = (function() {
        var _results;
        _results = [];
        for (k in stuff) {
          v = stuff[k];
          _results.push(k + ' x ' + v);
        }
        return _results;
      })();
      if (text.length > 0) {
        return text.join('\n');
      } else {
        return 'nothing';
      }
    };

    return CampaignStorage;

  })();
});

// Generated by CoffeeScript 1.5.0-pre
